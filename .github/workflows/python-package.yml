# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "master" ]
    tags:
      - 'v*'  # Trigger on version tags (e.g., v1.0.0)
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:  # Manual trigger for additional flexibility
    inputs:
      create_release:
        description: 'Create a GitHub Release?'
        required: false
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  # Installing from requirements.txt instead
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest --maxfail=1
    - name: Run main.py
      run: |
        python main.py  # Runs your main.py script
    - name: Check for unused packages
      run: |
        pip install pipreqs
        pipreqs --force  # Regenerate the requirements.txt to check for unused dependencies

  create-release:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event.inputs.create_release == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate Changelog
        run: |
          git fetch --tags
          github-changelog-generator --token ${{ secrets.GITHUB_TOKEN }} --user ${{ github.repository_owner }} --repo ${{ github.repository }} --release-url https://github.com/${{ github.repository }}/releases
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Automatic release created for ${{ github.ref }}.
            $(cat CHANGELOG.md)  # Include the generated changelog in the release body.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
