{
    ".gitignore": "Specifies files and directories to be ignored by Git.",
    ".gitmodules": "Configuration file for Git submodules.",
    "comments.json": "Stores comments, metadata, and development notes.",
    "main.py": "Entry point of the application.",
    "README.md": "Project overview, setup instructions, and usage details.",
    "requirements.txt": "List of Python dependencies required for the project.",
    "run_main.bat": "Batch file to run the application on Windows.",
    "LICENSE": "Licensing information for the project.",
    ".settings": {
        "controls": "Contains settings related to control schemes.",
        "keybindings": "Stores custom keybinding configurations.",
        "pets": "Settings for pet-related features in the application."
    },
    "assets": {
        "elite_template.jpg": "Template image for detecting elite mobs.",
        "icon.ico": "Application icon (Windows format).",
        "icon.png": "Application icon (general format).",
        "label_map.pbtxt": "Maps labels to detection categories for machine learning.",
        "minimap_br_template.png": "Bottom-right minimap detection template.",
        "minimap_tl_template.png": "Top-left minimap detection template.",
        "other_template.png": "Template for miscellaneous detection targets.",
        "player_template.png": "Template image for detecting the player character.",
        "rune_buff_template.jpg": "Template for detecting rune buffs.",
        "rune_template.png": "Template for detecting runes in the game.",
        "alerts": {
            "ding.mp3": "Audio alert for general notifications.",
            "rune_appeared.mp3": "Alert sound for rune appearances.",
            "siren.mp3": "Warning sound for critical situations."
        }
    },
    "docs": {
        "folder_structure.txt": "Documentation explaining the folder structure and file purposes."
    },
    "resources": {
        "command_books": {
            "kanna.py": "Command book specific to the Kanna class in the game."
        },
        "keybindings": {
            "kanna": "Keybinding settings specific to the Kanna class."
        },
        "layouts": {
            "kanna": {
                "dcup2": "Layout configuration file for Kanna's DCUP2 routine."
            }
        },
        "routines": {
            "kanna": {
                "cf1.csv": "Routine configuration for CF1 map.",
                "dcup2.csv": "Routine configuration for DCUP2 map.",
                "lh6.csv": "Routine configuration for LH6 map.",
                "mts3.csv": "Routine configuration for MTS3 map.",
                "os3.csv": "Routine configuration for OS3 map."
            }
        }
    },
    "src": {
        "command_book": {
            "command_book.py": "Centralized command book management logic.",
            "resources": {
                "keybindings": {
                    "kanna": "Keybinding resources for Kanna."
                }
            }
        },
        "common": {
            "config.py": "Handles configuration loading and parsing.",
            "interfaces.py": "Defines shared interfaces and abstractions.",
            "settings.py": "Manages global application settings.",
            "utils.py": "Common utility functions used across the project.",
            "vkeys.py": "Virtual key mapping for simulating keyboard inputs."
        },
        "detection": {
            "detection.py": "Core logic for detecting game elements (e.g., runes, mobs)."
        },
        "gui": {
            "interfaces.py": "Shared interfaces for GUI components.",
            "__init__.py": "Makes the GUI package importable.",
            "edit": {
                "commands.py": "GUI logic for command editing.",
                "components.py": "Custom GUI components for editing.",
                "controls.py": "Logic for managing GUI controls.",
                "main.py": "Entry point for editing-related GUI features.",
                "minimap.py": "Minimap-specific editing GUI logic.",
                "record.py": "GUI for recording routines or commands.",
                "routine.py": "Routine editing logic in the GUI.",
                "status.py": "GUI for viewing and editing bot statuses."
            },
            "menu": {
                "file.py": "File menu logic in the GUI.",
                "main.py": "Main menu handling in the GUI.",
                "update.py": "Update-related GUI logic."
            },
            "settings": {
                "main.py": "Settings management in the GUI.",
                "pets.py": "Pet-related settings logic in the GUI."
            },
            "view": {
                "details.py": "GUI for viewing detailed information.",
                "main.py": "Main GUI entry point for views.",
                "minimap.py": "Minimap view logic.",
                "routine.py": "Routine viewing logic in the GUI.",
                "status.py": "Status view logic in the GUI."
            }
        },
        "modules": {
            "bot.py": "Core bot logic and orchestration.",
            "capture.py": "Handles in-game image capturing and processing.",
            "gui.py": "High-level GUI logic and initialization.",
            "listener.py": "Listens for key events and actions.",
            "notifier.py": "Manages notifications for user alerts."
        },
        "routine": {
            "components.py": "Core components for routine management.",
            "layout.py": "Handles layout configurations for routines.",
            "routine.py": "Main routine management logic."
        }
    },
    "utils": {
        "generate_structure.py": "Script to generate and manage the folder structure dynamically."
    }
}
